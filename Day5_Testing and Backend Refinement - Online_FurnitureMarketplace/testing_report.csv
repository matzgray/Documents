Test Case ID,Description,Test Steps,Expected Result,Actual Result,Status,Severity Level,Remarks
FT-001,Ensure that products are displayed correctly on the marketplace page.,"Navigate to the marketplace page. Check if all product images, names, and prices are displayed correctly.",All product details are visible without any distortion.,As expected. All products are correctly displayed.,Passed,Low,Product display is correct.
FT-002,Validate accurate results based on user inputs in filters and search bar.,Apply filters like category or price range. Type a search query in the search bar.,Only filtered products are shown after applying the search/filter.,Filters and search work as expected.,Passed,Medium,Everything works fine.
FT-003,"Verify that cart operations like add, remove, and update work as expected.",Add a product to the cart. Update quantity or remove the item.,Product is added/removed/updated correctly.,Cart updates as expected.,Passed,High,Functionality is working well.
FT-004,Verify that dynamic product detail pages load correctly.,Click on a product link. Check if the product detail page loads with the correct information.,The page should show correct product details.,Product detail page loads correctly.,Passed,Low,Dynamic routing works as expected.
EH-001,Add error messages for API failures and implement fallback UI.,Simulate API failure by disconnecting the backend. Verify if the error message 'Unable to load products. Please try again later.' is displayed.,Error message is displayed when API fails.,The error message appears as expected.,Passed,Medium,Error handling is working correctly.
OP-001,Optimize product images for faster load times.,Use TinyPNG to compress product images.,Images should be compressed and optimized for faster loading.,Images are compressed and optimized.,Passed,Low,Image optimization works as expected.
OP-002,Implement lazy loading for large images.,Implement lazy loading to defer image loading until visible.,Images should be loaded only when visible on the page.,Lazy loading works correctly.,Passed,Low,Lazy loading implemented successfully.
ST-001,Secure the API communication and input validation.,Ensure that all API calls are made over HTTPS. Validate inputs to prevent SQL injection or XSS attacks.,Secure communication over HTTPS and validated inputs.,All inputs are validated; API uses HTTPS.,Passed,High,Security measures implemented successfully.
UAT-001,Simulate real-world usage of browsing products and checking out.,Browse through products. Add items to the cart and proceed to checkout.,Tasks like browsing and checkout should be seamless.,UAT completed successfully with no issues.,Passed,Low,No usability issues found.
